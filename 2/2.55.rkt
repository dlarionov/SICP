#lang racket

(define (=number? x y) (and (number? x) (= x y)))
(define (variable? x) (symbol? x))
(define (same-variable? x y) (and (variable? x) (variable? y) (eq? x y)))
(define (sum? x) (and (pair? x) (eq? (car x) '+)))
(define (make-sum a b)
  (cond ((=number? a 0) b)
        ((=number? b 0) a)
        ((and (number? a) (number? b)) (+ a b))
        (else (list '+ a b))))
(define (addend x) (car (cdr x)))
(define (augend x) (car (cdr (cdr x))))
(define (product? x) (and (pair? x) (eq? (car x) '*)))
(define (make-product a b)
  (cond ((=number? a 0) 0)
        ((=number? b 0) 0)
        ((=number? a 1) b)
        ((=number? b 1) a)
        ((and (number? a) (number? b)) (* a b))
        (else (list '* a b))))
(define (multiplier x) (car (cdr x)))
(define (multiplicand x) (car (cdr (cdr x))))

(define (exp? x) (and (pair? x) (eq? (car x) '^)))
(define (make-exp x n)
  (cond ((=number? n 0) 1)
        ((=number? n 1) x)
        ((and (number? x) (number? n)) (expt x n))
        (else (list '^ x n))))
(define (base x) (car (cdr x)))
(define (power x) (car (cdr (cdr x))))

(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum (deriv (addend exp) var)
                   (deriv (augend exp) var)))
        ((product? exp)
         (make-sum
          (make-product (multiplier exp)
                        (deriv (multiplicand exp) var))
          (make-product (deriv (multiplier exp) var)
                        (multiplicand exp))))
        ((exp? exp)
         (let ((b (base exp))
               (n (power exp)))
           (make-product
            (make-product n (make-exp b (- n 1)))
            (deriv b var))))
        ))


(deriv '(+ (* (+ y 2) (^ x 3)) (* (* x y) (+ 3 x))) 'x)
